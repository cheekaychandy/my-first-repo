Feature Folder:---

Feature: Dashboard Risk Status Validation

  Scenario: Validate risk status across tabs on Dashboard
    Given User is logged in
    When User navigates to the Dashboard page
    Then User should see "Moderate risk" in the "Main Dashboard" tab
    And User should see "Low risk" in the "Saudi Arabia" tab
    And User should see "Moderate risk" in the "Russia" tab
    And User should see "Low risk" in the "European Union" tab
    And User should see "Low risk" in the "Canada" tab
    And User should see "Low risk" in the "Australia" tab
    And User should see "Moderate risk" in the "United States" tab

PageObjects

package your.package.name.pages;

import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;

public class DashboardPage {

    WebDriver driver;
    WebDriverWait wait;

    public DashboardPage(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    }

    public void clickTab(String tabName) {
        WebElement tab = wait.until(ExpectedConditions.elementToBeClickable(
                By.xpath("//span[text()='" + tabName + "']")));
        tab.click();
    }

    public String getRiskLabelText(String riskTextColor) {
        WebElement label = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//span[contains(@class,'text-label-s') and contains(@class,'" + riskTextColor + "')]")));
        return label.getText();
    }
}


Step Definition

package your.package.name.stepdefinitions;

import your.package.name.pages.DashboardPage;
import io.cucumber.java.en.*;
import org.openqa.selenium.WebDriver;

import static org.junit.Assert.*;

public class DashboardSteps {

    WebDriver driver = Hooks.getDriver(); // Assuming Hooks manages WebDriver
    DashboardPage dashboardPage = new DashboardPage(driver);

    @Given("User is logged in")
    public void user_is_logged_in() {
        // Login already handled in previous scenario or hooks
    }

    @When("User navigates to the Dashboard page")
    public void user_navigates_to_dashboard() {
        // Optionally verify you're on the dashboard page
    }

    @Then("User should see {string} in the {string} tab")
    public void user_should_see_risk_in_tab(String expectedRisk, String tabName) {
        dashboardPage.clickTab(tabName);
        String riskColor = getColorClassForRisk(expectedRisk); // helper
        String actualRisk = dashboardPage.getRiskLabelText(riskColor);
        assertEquals(expectedRisk, actualRisk);
    }

    private String getColorClassForRisk(String riskText) {
        switch (riskText.toLowerCase()) {
            case "low risk": return "text-green";
            case "moderate risk": return "text-[#856516]";
            default: return "text-default";
        }
    }
}

RunnerClass

package your.package.name.runners;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(
    features = "features",
    glue = {"your.package.name.stepdefinitions"},
    plugin = {"pretty", "html:target/cucumber-reports.html"},
    monochrome = true
)
public class TestRunner {}
